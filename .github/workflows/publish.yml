name: publish

on:
  push:
    tags:
      - '*'

jobs:
  publish-non-linux:
    name: Publish for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # - os: ubuntu-latest
          #  artifact_name: pacaptr
          #  asset_name: pacaptr-linux-amd64
          - os: windows-latest
            artifact_name: pacaptr.exe
            asset_name: pacaptr-windows-amd64
          - os: macos-latest
            artifact_name: pacaptr
            asset_name: pacaptr-macos-amd64

    steps:
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/checkout@v1

      - name: Install UPX on Windows
        if: ${{matrix.os == 'windows-latest'}}
        run: choco install upx

      - name: Install UPX on MacOS
        if: ${{matrix.os == 'macos-latest'}}
        run: brew install upx

      - name: Build
        run: cargo build --release --locked

      - name: compress (windows)
        if: ${{matrix.os == 'windows-latest'}}
        run: |
          strip -s ./target/release/${{ matrix.artifact_name }}
          upx -9 --lzma ./target/release/${{ matrix.artifact_name }}

      - name: compress (macos)
        if: ${{matrix.os == 'macos-latest'}}
        run: |
          strip ./target/release/${{ matrix.artifact_name }}
          upx -9 --lzma ./target/release/${{ matrix.artifact_name }}

      - name: Zip
        run: tar czvf ${{ matrix.asset_name }}.tar.gz -C ./target/release/ ${{ matrix.artifact_name }}

      - name: Generate sha256
        run: openssl dgst -r -sha256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload sha256 to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.asset_name }}.tar.gz.sha256
          asset_name: ${{ matrix.asset_name }}.tar.gz.sha256
          tag: ${{ github.ref }}
          overwrite: true

  publish-linux:
    name: Publish for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: pacaptr
            asset_name: pacaptr-linux-amd64
            target_name: x86_64-unknown-linux-musl

    steps:
      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@stable

      - run: sudo apt install upx-ucl binutils

      - run: rustup target add ${{ matrix.target_name }}

      - name: Build
        run: cargo build --release --locked --target=${{ matrix.target_name }}

      - name: compress
        run: |
          strip -s ./target/${{ matrix.target_name }}/release/${{ matrix.artifact_name }}
          upx -9 --lzma ./target/${{ matrix.target_name }}/release/${{ matrix.artifact_name }}

      - name: Zip
        run: tar czvf ${{ matrix.asset_name }}.tar.gz -C ./target/${{ matrix.target_name }}/release/ ${{ matrix.artifact_name }}

      - name: Generate sha256
        run: openssl dgst -r -sha256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload sha256 to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.asset_name }}.tar.gz.sha256
          asset_name: ${{ matrix.asset_name }}.tar.gz.sha256
          tag: ${{ github.ref }}
          overwrite: true

  bump-tap-version:
    name: Generate new ruby script for homebrew tap
    needs: [publish-linux, publish-non-linux]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - run: npm i @actions/core @actions/github

      - name: Get "version"
        id: ver
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Check "version"
        env:
          RELEASE_VERSION: ${{ steps.ver.outputs.tag }}
        run: |
          echo "Detected version:"
          echo $RELEASE_VERSION

      - name: Get tarball file name
        id: binaries
        env:
          BIN_MAC: pacaptr-macos-amd64.tar.gz
          BIN_LINUX: pacaptr-linux-amd64.tar.gz
        run: |
          echo ::set-output name=mac::$BIN_MAC
          echo ::set-output name=linux::$BIN_LINUX

      - name: Get url
        id: url
        env:
          URL_MAC: https://github.com/${{ github.repository }}/releases/download/${{ steps.ver.outputs.tag }}/${{ steps.binaries.outputs.mac }}
          URL_LINUX: https://github.com/${{ github.repository }}/releases/download/${{ steps.ver.outputs.tag }}/${{ steps.binaries.outputs.linux }}
        run: |
          echo ::set-output name=mac::$URL_MAC
          echo ::set-output name=linux::$URL_LINUX

      - name: Get files and checksums
        id: checksums
        run: |
          curl -LO ${{ steps.url.outputs.mac }}.sha256
          curl -LO ${{ steps.url.outputs.linux }}.sha256
          echo ::set-output name=mac::$(cat ${{ steps.binaries.outputs.mac }}.sha256 | awk '{ print $1 }')
          echo ::set-output name=linux::$(cat ${{ steps.binaries.outputs.linux }}.sha256 | awk '{ print $1 }')

      - name: Replace variables in template
        uses: rami3l/bumper@master
        id: replace
        with:
          template: 'dist/brew/template.rb'
          out: 'pacaptr.rb'

          rules: |
            {
              "version": "${{ steps.ver.outputs.tag }}",
              "url_mac": "${{ steps.url.outputs.mac }}",
              "sha256_mac": "${{ steps.checksums.outputs.mac }}",
              "url_linux": "${{ steps.url.outputs.linux }}",
              "sha256_linux": "${{ steps.checksums.outputs.linux }}"
            }

      - name: Get the output script
        run: cat pacaptr.rb

      - name: Upload the script to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: 'pacaptr.rb'
          asset_name: 'pacaptr.rb'
          tag: ${{ github.ref }}
          overwrite: true

  # this scripts packs up a Chocolatey package and pushes it to Choco repository
  publish-choco:
    name: Publish app on Chocolatey
    runs-on: windows-latest
    needs: [publish-non-linux]
    if: ${{ !contains(github.ref, '-') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get the version
        id: ver
        run: |
          import re
          version = re.sub('refs/\w+/', '' ,'${{ github.ref }}')
          print('::set-output name=tag::{}'.format(version))
          # Remove suffix '-take.X' in the tag
          version = re.sub('-?take\.\d+', '', version)
          # Pop off the leading 'v' in the tag
          version = re.sub('^v', '', version)
          print('::set-output name=ver::{}'.format(version))
        shell: python

      - name: Download release
        run: iwr https://github.com/${{ github.repository }}/releases/download/${{ steps.ver.outputs.tag }}/pacaptr-windows-amd64.tar.gz -OutFile ./release.tar.gz

      - name: Extract release
        run: tar xvf ./release.tar.gz -C ./dist/choco/tools/

      - name: Add license
        run: cp LICENSE dist/choco/tools/LICENSE.txt

      - name: Generate Nuspec from template
        id: replace
        shell: python
        run: |
          import re
          from xml.sax.saxutils import escape
          version = '${{ steps.ver.outputs.ver }}'
          # with open('README.md', 'r', encoding='utf8') as desc_file:
          #     description = desc_file.read()
          with open(
                  'dist/choco/pacaptr.template.nuspec', 'r',
                  encoding='utf8') as template_file:
              template = template_file.read()
          template = re.sub('\{version\}', escape(version), template)
          # template = re.sub('\{description\}', escape(description), template)
          with open('dist/choco/pacaptr.nuspec', 'w', encoding='utf8') as output:
              output.write(template)

      - name: Generate verification.txt
        shell: python
        run: |
          import re
          from hashlib import sha1, sha256, sha3_256, blake2b

          repository = 'https://github.com/${{ github.repository }}'
          release_uri = repository + '/releases/download/${{ steps.ver.outputs.tag }}/pacaptr-windows-amd64.tar.gz'
          file_path = 'dist/choco/tools/pacaptr.exe'

          hash_algorithms = [sha1(), sha256(), sha3_256(), blake2b()]
          hash_result = ""

          chunk_size = 64 * 1024
          with open(file_path, 'rb') as f:
              while True:
                  buf = f.read(chunk_size)
                  if len(buf) == 0: break
                  for a in hash_algorithms:
                      a.update(buf)
              for a in hash_algorithms:
                  hash_result += "{}: {}\n".format(a.name, a.hexdigest())

          with open(
                  'dist/choco/tools/VERIFICATION.template.txt', 'r',
                  encoding='utf8') as template_file:
              template = template_file.read()
          template = re.sub('\{repository\}', repository, template)
          template = re.sub('\{release_file\}', release_uri, template)
          template = re.sub('\{checksums\}', hash_result, template)

          with open('dist/choco/tools/VERIFICATION.txt', 'w', encoding='utf8') as output:
              output.write(template)

      - run: rm dist/choco/tools/VERIFICATION.template.txt

      - name: Check nuget template
        run: |
          echo "NuGet spec file:"
          cat dist/choco/pacaptr.nuspec

      - name: Set choco api key
        run: choco apikey --key ${{ secrets.CHOCO_API_KEY }} --source https://push.chocolatey.org --verbose

      - name: Pack up NuGet package
        run: choco pack dist/choco/pacaptr.nuspec --verbose

      - name: Push to choco repository
        run: choco push pacaptr.${{ steps.ver.outputs.ver }}.nupkg --source https://push.chocolatey.org --verbose
